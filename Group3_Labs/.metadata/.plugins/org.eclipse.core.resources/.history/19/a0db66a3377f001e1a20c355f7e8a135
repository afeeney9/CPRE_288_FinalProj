/**
 * lab10_main.c

 */
#include <stdint.h>
#include <stdbool.h>
#include <Math.h>
#include "timer.h"
#include "lcd.h"
#include "button.h"
#include "ping.h"
#include "uart.h"
#include "servo.h"
#include <inc/tm4c123gh6pm.h>

uint8_t command = 0;
float degrees = 90;
int matchVal;
char buffer[100];
struct object objArr[5];

//servo calibration for cybot00
int zeroMatch = 311467;
int oneEightyMatch = 284356;

struct object
{
    int objNum;
    int startAngle;
    int dist;
    int width;
    int endAngle;
};

volatile enum
{
    LOW, HIGH, DONE
} state;
volatile unsigned int rising_time;
volatile unsigned int falling_time;
int pulse_time;

void printString(char *arr)
{
    int i = 0;
    while (arr[i])
    {
        uart_sendChar(arr[i]);
        i++;
    }
    uart_sendChar('\n');
    uart_sendChar('\r');
}

char dir = 0;
void print()
{
    lcd_clear();
    if (dir)
    {
        snprintf(buffer, 100, "position counter: %d \n lower degree", matchVal);
    }
    else
    {
        snprintf(buffer, 100, "position counter: %d \n higher degree",
                 matchVal);
    }
    lcd_puts(buffer);
}

void part2()
{
    matchVal = servo_calibrate(90);
    command = button_getButton();
    if (command == 0x8)
    {
        matchVal = servo_calibrate(0);
        print();
    }
    else if (command == 0x4)
    {
        dir = dir ^ 0x1;
        print();
    }
    else if (command == 0x2)
    {
        if (!dir)
        {
            degrees += 5;
            matchVal = servo_calibrate(degrees);
        }
        else
        {
            degrees -= 5;
            matchVal = servo_calibrate(degrees);
        }
        print();
    }
    else if (command == 0x1)
    {
        if (!dir)
        {
            degrees++;
            matchVal = servo_calibrate(degrees);
        }
        else
        {
            degrees--;
            matchVal = servo_calibrate(degrees);
        }
        print();
    }
}

void scan()
{
    matchVal = zeroMatch;
    int decrement = ((zeroMatch - oneEightyMatch) / 180) * 2;
    char i = 0;
    int dataArr[91];

    while (matchVal > oneEightyMatch)
    {
        for (i = 0; i <= 180; i += 2)
        {
            timer_waitMillis(100);
            data = adc_read();
            dist = 98223 * (pow(data, -1.152));
            dataArr[i / 2] = dist;
            timer_waitMillis(100);
            matchVal -= decrement;
            servo_move(matchVal);
        }

        pulse_time = ping_read();
        pulse_time = (abs(pulse_time) / (2 * 16)) * 0.034;
        dataArr[i] = pulse_time;
        i++;

    }
}

int main(void)
{
//Question 1: The servo is controlled through pulse width modulation where position of the servo is dependent on duration of the pulse
// to set postion to 0 degrees pulse high for 1 ms every 20ms for 90 degrees pulse high for 1.5 ms every 20ms for 180 degrees
// pulse high for 2 ms every 20 ms

///Question 2: Timer 1 regs relevant to this lab are: TIMER0_CTL_R, TIMER0_CFG_R, TIMER0_TAMR_R, TIMER0_TAPR_R, TIMER0_TAILR_R,
//TIMER0_TAPMR_R, TIMER0_TAMATCHR_R, TIMER0_ICR_R, TIMER0_IMR_R

//Question 3: There are 320,000 ticks in a 20ms duration for a 16MHz clk sys
// (16*10^6 # cycles per second)*(20*10^-3 seconds)= 320,000 cycles or ticks

//Question 4: In terms of this lab the PWM signal is used to control the serve the high pulse is used to determine the degree
//which the servo should point to and the low pulse is used as a wait period between the high signals to distinguish when the
//signal has stop. The pin is configured as an output when we are sending the wave form to the servo and can be cleared after
//the pusle is sent

    timer_init();
    lcd_init();
    lcd_clear();
    servo_init();
    button_init();
    ping_init();
    uart_init();
    TIMER3B_Handler();

    while (1)
    {
        char uart_char = uart_receive();
        if (uart_char == 'm')
            part3();

    }

    return 0;
}

