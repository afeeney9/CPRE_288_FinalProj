
#include "scan.h"

void printString(char *arr)
{
    int i = 0;
    while (arr[i])
    {
        uart_sendChar(arr[i]);
        i++;
    }
    uart_sendChar('\n');
    uart_sendChar('\r');
}

void scan()
{
    matchVal = zeroMatch;
       int decrement = ((zeroMatch - oneEightyMatch) / 180) * 2;
       char i = 0;
       int dataArr[91];
       int smallWidth[3] = { 1000000, 25000000, 100000 };
       int obj = 0;

       while (matchVal > oneEightyMatch)
       {
           timer_waitMillis(100);
           servo_move(matchVal);
           timer_waitMillis(100);
           matchVal -= decrement;
           pulse_time = ping_read();
           pulse_time = (abs(pulse_time) / (2 * 16)) * 0.034;
           dataArr[i] = pulse_time;
           i++;

       }
       i = 1;
       int count = 0;
       while (i <= 91)
       {
           if (dataArr[i] - 2 < dataArr[i - 1] && dataArr[i - 1] < dataArr[i] + 2
                   && dataArr[i - 1] < 50)
           {
               count++;
           }
           else
           {
               count = 0;
           }

           if (count > 3)
           {
               obj++;
               objArr[obj - 1].objNum = obj;   //object number
               objArr[obj - 1].startAngle = i * 2 - 8; //start angle
               int dist = dataArr[i - 4] + dataArr[i - 3] + dataArr[i - 2]
                       + dataArr[i - 1];
               while (dataArr[i] - 4 < dataArr[i - 1]
                       && dataArr[i - 1] < dataArr[i] + 4 && dataArr[i - 1] < 100)
               {
                   dist += dataArr[i];
                   count++;
                   i++;
               }
               objArr[obj - 1].dist = dist / count; //distance

               objArr[obj - 1].width = i * 2 - ((i - count) * 2); //width
               objArr[obj - 1].endAngle = i * 2; //end angle

               if (objArr[obj - 1].width < smallWidth[0]) //check for smallest width
               {
                   smallWidth[0] = objArr[obj - 1].width; //width
                   smallWidth[1] = (objArr[obj - 1].startAngle
                           + objArr[obj - 1].endAngle) / 2; //angle
                   smallWidth[2] = objArr[obj - 1].dist; //distance

               }
               count = 0;
               i--;
           }
           i++;
       }
       char head[] = "Angle(Degrees)    Distance(m)";
       printString(head);
       for (i = 0; i <= 90; i++)
       {
           snprintf(buffer, 100, "%d                %d", i * 2, dataArr[i]);
           printString(buffer);
       }

       char head2[] = "Object#  Start angle      End angle      Distance     Width";
       printString(head2);
       for (i = 0; i < obj; i++)
       {
           snprintf(buffer, 100,
                    "%d            %d            %d           %d               %d",
                    objArr[i].objNum, objArr[i].startAngle, objArr[i].endAngle,
                    objArr[i].dist, objArr[i].width);
           printString(buffer);
       }
       snprintf(buffer, 100, "smallest angle location: %d and distance %d",
                smallWidth[1], smallWidth[2]);
       printString(buffer);
       servo_move(zeroMatch - ((smallWidth[1]) * (decrement / 2)));
}
